#!/bin/bash

# Install passh
# curl -k https://raw.githubusercontent.com/brunomgalmeida/passh/master/passh.c >passh.c
# gcc passh.c -o passh && chmod +x passh && sudo mv passh /usr/local/bin && rm passh.c

# alias ssh='ssh_wrapper'
# Encrypt: printf "password" | gpg -c | base64 -w 0
# Decrypt: printf "jA0ECQMCpgfs205Ngmr/0j0BZ9zL9Z+3F18oK74vN/rJehoAhRAfRcc9r8WU8SpukRGsDJEMdi3BxPeR7APXZq412r79aYnDCFIXIzwg" | base64 -d | gpg -d -q

# https://askubuntu.com/questions/87956/can-you-set-passwords-in-ssh-config-to-allow-automatic-login
# Create a list of password in a hashmap format
# > https://stackoverflow.com/questions/1494178/how-to-define-hash-tables-in-bash
# sed -rn "s/^\s*#(Password[0-9])\s+=\s+(.*)/\1 \2/p"  ~/.ssh/config

function getPass () {
    # Read a list of passwords int he format `#Password[0-9]=passwordhere` from the $USER ssh config file
    OIFS=$IFS; IFS=';'
    PASSWORD_LIST=$( sed -rn "s/^\s*#\s*(Password[0-9])\s+=\s+(.*)/\1 \2/p"  ~/.ssh/config )
    IFS=$OIFS
    echo "$PASSWORD_LIST" | grep "Password$1" | awk -F ' ' '{ print $2 }'
}

#TODO How to extract password from ssh config inheritance

# Extract the value that follows the text '#Password '
password=$(awk '
function debug(level , msg) {
    if (level<=vlevel) print "awk:", msg > "/dev/stderr";
};

BEGIN {
    # Collect the SSH arguments as keys of a dictionary, so that we can easily check for inclusion.
    for (i = 2; i < ARGC; i++) {

        if (ARGV[i] ~ "-[v]+" ){
            #TODO count the number of vs, and add verbosity levels based on that
            vlevel=1;
            debug(3, "Debug enabled") ;
        }

        # Ignore arguments that start with - as there are most likely options
        if (! match (ARGV[i], /^-/ ) ){
            sshArgs[ARGV[i]] = ARGV[i]
            debug(3, "ARG=" ARGV[i]);
        }
    }
    # Only process the first argument; all others are the command-line arguments given to ssh.
    ARGC = 2
    # show all values in array: for (key in sshArgs) { print sshArgs[key] }
}
$1 == "#Password" && inhost {
    # Look for the LAST instance of the pasword that matches this line
    pass = ""
    for(i=2;i<=NF;i+=1) {
        if (i >= 2){
            debug(1, "FOUND PASSWORD with value = " $i)
            pass=$i
            inhost=0
            break
        }
    }
    # printf pass
    # Enable the next line to stop parsing at the first instance of password found
    # exit pass
}
/^\s*Host\s/ {
    for (key in sshArgs) {                                                                          # For every entry in sshArgs
        # show the host that we are working with
        debug(2, "Checking line " $0);

        split($0, hosts)                                                                            # Store in the variable host all the alias, split by space
        # for (key in hosts) { print hosts[key] }
        for (h in hosts){                                                                           # For every alias in the Host
            if (hosts[h] == "Host") {
                debug(3, "ignoring key (" hosts[h] ")");
                continue;
            }

            # debug("Comparing (" key ") with (" hosts[h] ")");
            if ( key ~ hosts[h] ){
                 # display the whole line entries that match
                debug(1, "FOUND MATCH on line (" $0 ")");
                inhost=1
                break
            } else {
                inhost=0
            }
        }
    }
}

# At the end of the script, ouput the value of variable pass
END {
    debug(1, "Using password " pass);
    print pass
}
' ~/.ssh/config "$@")

# To test the command above, simply copy from AWK onwards and add `~/.ssh/config ssh coral-prod --list --help` to the end

# If the password is a single digit, then fetch the Password$ID, otherwise use the value returned from the parsing
[[ $password =~ [0-9]{1} ]] && p=$( getPass $password ) || p=$password

# Check if there is a local password ($p), if not defaults to Password0
decode=${p:-$( getPass 0 )}

# IF gpg-agent version >2, whe should use gpg2
# https://unix.stackexchange.com/questions/231386/how-to-make-gpg-find-gpg-agent

# Defaults to gpg if found
gpg=$( which gpg )

# TODO Using gpg2 causes other type of problems, disabling it until I can work out what is wrong
# if [ -z $gpg ]; then
#     # Could not find gpg2, then use gpg
#     gpg=$( which gpg )
# fi

# if [ -z $gpg ]; then
#     printf "gpg not found. Exiting...\n"
#     exit 1
# fi

if [ "$decode" ]; then
    passw=$( printf "$decode" | base64 -d | $gpg -d -q )
    passh -c1 -p "$passw" ssh "$@"
else
    ssh "$@"
fi
